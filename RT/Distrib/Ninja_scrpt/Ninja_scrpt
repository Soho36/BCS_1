#region Using declarations
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MyCustomStrategy : Strategy
    {
        private bool executeLongTrade = false;
        private bool executeShortTrade = false;
        private double stopPrice = 0;
        private double targetPrice1 = 0;
        private double targetPrice2 = 0;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "Filetransmit2";
                Calculate = Calculate.OnEachTick;
                EntriesPerDirection = 3; // Allow 2 entries
                EntryHandling = EntryHandling.UniqueEntries;
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBars[0] < BarsRequiredToTrade) return;

            string signalFilePath = "C:\\Users\\Liikurserv\\PycharmProjects\\BCS_1\\RT\\trade_signal.txt";

            if (File.Exists(signalFilePath))
            {
                try
                {
                    string signal = File.ReadAllText(signalFilePath).Trim();
                    string[] parts = signal.Split(',');

                    if (parts.Length == 4)
                    {
                        string tradeDirection = parts[0].Trim();
                        if (double.TryParse(parts[1].Trim(), out stopPrice) &&
                            double.TryParse(parts[2].Trim(), out targetPrice1) &&
                            double.TryParse(parts[3].Trim(), out targetPrice2))
                        {
                            if (tradeDirection.Equals("Buy", StringComparison.OrdinalIgnoreCase) && Position.MarketPosition == MarketPosition.Flat)
                            {
                                executeLongTrade = true;
                                File.WriteAllText(signalFilePath, string.Empty);
                            }
                            else if (tradeDirection.Equals("Sell", StringComparison.OrdinalIgnoreCase) && Position.MarketPosition == MarketPosition.Flat)
                            {
                                executeShortTrade = true;
                                File.WriteAllText(signalFilePath, string.Empty);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Print($"Error reading signal file: {ex.Message}");
                }
            }

            if (executeLongTrade)
            {
                double entryPrice = Close[0];
                Print($"Placing 3 long orders with TP1: {targetPrice1}, TP2: {targetPrice2}, SL: {stopPrice}");

                EnterLong(2, "Long1");
                SetStopLoss("Long1", CalculationMode.Price, stopPrice, false);
                SetProfitTarget("Long1", CalculationMode.Price, targetPrice1);

				EnterLong(1, "Long3");
                SetStopLoss("Long3", CalculationMode.Price, stopPrice, false);
                SetProfitTarget("Long3", CalculationMode.Price, targetPrice2);

                executeLongTrade = false;
            }

            if (executeShortTrade)
            {
                double entryPrice = Close[0];
                Print($"Placing 3 short orders with TP1: {targetPrice1}, TP2: {targetPrice2}, SL: {stopPrice}");

                EnterShort(2, "Short1");
                SetStopLoss("Short1", CalculationMode.Price, stopPrice, false);
                SetProfitTarget("Short1", CalculationMode.Price, targetPrice1);

				EnterShort(1, "Short3");
                SetStopLoss("Short3", CalculationMode.Price, stopPrice, false);
                SetProfitTarget("Short3", CalculationMode.Price, targetPrice2);

                executeShortTrade = false;
            }
        }
    }
}
